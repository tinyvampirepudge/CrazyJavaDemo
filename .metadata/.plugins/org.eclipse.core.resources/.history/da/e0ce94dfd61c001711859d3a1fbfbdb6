package lambda;

interface Eatable {
	void taste();
}

interface Flyable {
	void fly(String weather);
}

interface Addable {
	int add(int a, int b);
}

// 引用类方法1
@FunctionalInterface
interface Converter {
	Integer convert(String from);
}

@FunctionalInterface
interface Converter2 {
	String convert(String str1, String str2, Integer i);

	int a = 1;
}

public class LambdaQs {

	// 调用该方法需要Eatable对象
	public void eat(Eatable eatable) {
		System.out.println(eatable);
		eatable.taste();
	}

	// 调用该方法需要Flyable对象
	public void drive(Flyable f) {
		System.out.println("我正在驾驶：" + f);
		f.fly("【碧空如洗的晴日】");
	}

	// 调用该方法需要Addable对象
	public void test(Addable a) {
		System.out.println("5和3的和为：" + a.add(3, 5));
	}

	public static void main(String[] args) {
		LambdaQs lambdaQs = new LambdaQs();
		// lambda表达式的代码块只有一条语句，可以省略花括号
		lambdaQs.eat(() -> System.out.println("苹果的味道不错！"));
		// lambda表达式的形参列表只有一个形参，可以省略圆括号
		lambdaQs.drive(weather -> {
			System.out.println("今天的天气是：" + weather);
			System.out.println("直升机飞行平稳");
		});
		// lambda表达式的代码块只有一条语句，可以省略花括号
		// 代码块中只有一条语句，即使该表达式需要返回值，也可以省略return关键字
		lambdaQs.test((m, n) -> m + n);

		// 一、引用类方法。
		// 1、创建Converter对象
//		Converter converter = from -> Integer.valueOf(from);
		Converter converter = Integer :: valueOf;
		// 2、调用Converter对象的方法
		Integer val = converter.convert("99");
		System.out.println("val --> " + val);

		Converter2 converter2 = (str1, str2, integer) -> {
			return str1 + str2 + integer;
		};
		String result = converter2.convert("hello ", "world, ", 10086);
		System.out.println(result);
		
		//二、引用特定对象的实例方法
//		Converter converter3 = from -> "fkit.org".indexOf(from);
		Converter converter3 = "fkit.org"::indexOf;
		Integer value = converter3.convert("it");
		System.out.println("value --> "+value);
		
		//三、引用某类对象的实例方法
		
		//四、引用构造器
		
		
	}
}
